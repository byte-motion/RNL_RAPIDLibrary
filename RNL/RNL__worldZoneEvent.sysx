MODULE RNL__worldZoneEvent(SYSMODULE)


    !Dependencies
    ! - ioEvent

    !Datatype: worldZoneEvent
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

    RECORD worldZoneEvent
        dataPointer self;
        bool enabled;
        bool forbidden;
        wztemporary wz_id;
        dataPointer ioEvent_enter;
        dataPointer ioEvent_exit;
        eventInfo eInfo;
        shape zone;
    ENDRECORD

    !A constant that can be searched for to determine if a datatype module is loaded
    PERS dataType dataType_worldZoneEvent:="worldZoneEvent";

    !Per module setting for whether the list should be used
    !IF this bool is set to false then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_DYNAMIC_DATA_ALLOCATION:=TRUE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="";

    !Null constants
    CONST worldZoneEvent worldZoneEvent_NULL:=[["","",0,"","",0,""],FALSE,FALSE,[0],["","",0,"","",0,""],["","",0,"","",0,""],[[0],["","",0,"","",0,""],["","",0,"","",0,""],0],["",[[0,0,0],[1,0,0,0]],[0,0,0],FALSE]];
    LOCAL CONST worldZoneEvent worldZoneEvent_DEFAULT:=[["","",0,"","",0,""],FALSE,FALSE,[0],["","",0,"","",0,""],["","",0,"","",0,""],[[0],["","",0,"","",0,""],["","",0,"","",0,""],0],["",[[0,0,0],[1,0,0,0]],[0,0,0],FALSE]];

    !Pre declared list to be dynamically allocated
    LOCAL VAR worldZoneEvent list{50};
    !LOCAL VAR num list_lenght:=0;

    LOCAL CONST string signalName:="RNL_WZ_doZone_";

    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !NEW constructor with initial values
    FUNC dataPointer NEW_worldZoneEvent(
        \switch forbidden
        \shape zone
        \event event_enter_fromObject
        \event event_enter
        \event event_exit_fromObject
        \event event_exit
        )
        VAR dataPointer pointer;
        VAR worldZoneEvent data;

        !Allocate and set data
        NEW pointer;

        !Set initial data 
        data:=worldZoneEvent_get(pointer);

        !IF Present(exampleNumber1) data.exampleNumber1:=exampleNumber1;
        !IF Present(exampleNumber2) data.exampleNumber2:=exampleNumber2;
        !IF Present(exampleNumber3) data.exampleNumber3:=exampleNumber3;

        worldZoneEvent_set pointer,data;

        !Return pointer
        RETURN pointer;
    ENDFUNC

    !NEW constructor to allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
        VAR worldZoneEvent data;
        VAR dataPointer self_;
        VAR dataPointer inheritanceParent;
        VAR dataPointer inheritanceParent_Pointer;

        self_:=pointer;
        IF Present(self) self_:=self;

        data:=worldZoneEvent_DEFAULT;
        data.self:=self_;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            
            !Set the rmqLocation to this task
            pointer.rmqLocation := rmqQueue_SELF();
            
            !Allocate a list position
            pointer.type:=Type(list);
            LIST_worldZoneEvent_append list,data\index:=pointer.id;

            IF NOT INHERITS_FROM="" THEN
                !Create nessesary inheritance chain
                inheritanceParent:=NEW_(INHERITS_FROM);
                inheritanceParent_Pointer:=NEW_("dataPointer");
                dataPointer_set inheritanceParent_Pointer,inheritanceParent;
                pointer.inheritanceParent_id:=inheritanceParent_Pointer.id;
                pointer.inheritanceParent_name:=inheritanceParent_Pointer.name;
            ENDIF

        ELSE
            !Create a string value datatype
            pointer:=worldZoneEvent_(data);
        ENDIF


    ERROR
        !RAISE ;
    ENDPROC

    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer,VAR rmqmessage message)
        VAR worldZoneEvent data;
        RMQGetMsgData message,data;

        !Add custom behavior for "executing" this datatype here
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR worldZoneEvent data;
        RMQGetMsgData message,data;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            NEW pointer;
            worldZoneEvent_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=worldZoneEvent_(data);

    ERROR
        !RAISE ;
    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR worldZoneEvent data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=worldZoneEvent_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        RMQFindSlot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ERROR
        !RAISE ;
    ENDPROC

    !Cleans up any datapointer
    LOCAL PROC ERASE(INOUT dataPointer pointer)

        VAR dataPointer inheritanceParent;

        !Call ERASE on the object that this object inherits from
        IF pointer.inheritanceParent_name<>""
            OR pointer.inheritanceParent_id>0 THEN
            inheritanceParent.id:=pointer.inheritanceParent_id;
            inheritanceParent.name:=pointer.inheritanceParent_name;

            ERASE_ inheritanceParent;
        ENDIF

        !ERASE
        IF dataPointer_isReference(pointer) worldZoneEvent_set pointer,worldZoneEvent_NULL;
        IF dataPointer_isIndex(pointer) LIST_worldZoneEvent_del list\keepIndexes,pointer.id;
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC


    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    !¤¤¤ Enable/Disable ¤¤¤
    PROC enable_(dataPointer pointer)
        try\obj:=pointer,"enable"\trowError;
    ENDPROC

    PROC disable_(dataPointer pointer)
        try\obj:=pointer,"disable"\trowError;
    ENDPROC

    !¤¤¤ Forbid/unForbid ¤¤¤
    PROC forbid_(dataPointer pointer)
        try\obj:=pointer,"forbid"\trowError;
    ENDPROC

    PROC unForbid_(dataPointer pointer)
        try\obj:=pointer,"unForbid"\trowError;
    ENDPROC


    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================

    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------

    !--- Checks if robtarget is in a forbidden zone ---
    LOCAL PROC robtargetIsForbidden(robtarget target,\wobjdata WObj)
        VAR pose targetPosition;
        VAR pose worldPosition;

        !Calculate world position
        targetPosition.rot:=target.rot;
        targetPosition.trans:=target.trans;

        worldPosition:=targetPosition;
        IF Present(WObj) worldPosition:=PoseMult(targetPosition,PoseMult(WObj.uframe,WObj.oframe));

        !Loop through all World Zone Events
        FOR i FROM 1 TO Dim(list,1) DO
            !If World Zone Event is enabled and forbidden
            IF list{i}.enabled=TRUE
            AND list{i}.forbidden=TRUE
            THEN
                !If world Position is inside zone volume
                IF list{i}.zone.type=SHAPE_BOX THEN
                    !IF worldPosition.trans.x < list{i}.zone.position.trans.x
                    !AND 

                ELSEIF list{i}.zone.type=SHAPE_SPHERE THEN
                    <SMT>

                ELSEIF list{i}.zone.type=SHAPE_CYLINDER THEN
                    <SMT>

                ENDIF

            ENDIF
        ENDFOR

    ENDPROC


    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data/Object Methods
    !///////////////////////////////////////////////////////////////////////////

    LOCAL FUNC string getSignalName(worldZoneEvent wzEvent)
        RETURN signalName + NumToStr(wzEvent.self.id,0);
    ENDFUNC
    
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ! Event Responses
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ! States
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    !&&& Get Self &&&
    LOCAL PROC getSelf(dataPointer pointer,INOUT datapointer self)
        VAR worldZoneEvent object;
        object:=worldZoneEvent_get(pointer);
        self:=object.self;
    ENDPROC

    !&&& Events &&&

!    LOCAL PROC setEventEnter(dataPointer pointer,datapointer triggerEvent,datapointer triggerObject)
!        VAR shapedata zone;      
!        VAR signaldo ALIAS_DO;
!        VAR worldZoneEvent object;
!        object:=worldZoneEvent_get(pointer);
        
!        !ERASE old ioEvents, and create NEW ones
!        ERASE object.ioEvent_enter;
!        object.ioEvent_enter := NEW_ioEvent(
!        \signalName:=getSignalName(object)
!        \triggerObject:=triggerObject
!        \triggerEvent:= event_get(triggerEvent)
!        \TYPE_DIGITAL_OUTPUT
!        \digital_TriggValue:=high
!        );
        
!        !Set up alias IO
!        AliasIO getSignalName(object),<ARG>;
        
!        !Set up zone
!        worldZone_from_shape zone,object.zone;
        
!        !ERASE old world zone supervisions and create new ones
!        WZFree object.wz_id;
!        WZDOSet\Temp,object.wz_id\Before,zone,ALIAS_DO,1;
        
        
!        worldZoneEvent_Set pointer,object;
!    ENDPROC

!    LOCAL PROC setEventExit(dataPointer pointer,datapointer e,datapointer fromObject)
!        <SMT>
!    ENDPROC


    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% Initialize the list %%%%

    !Initialize the list
    LOCAL PROC config()
        LIST_worldZoneEvent_clear list;
    ENDPROC

    !%%%% Direct Access to list %%%%

    !Allow acces to list
    FUNC worldZoneEvent worldZoneEvent_list(num i)
        RETURN list{i};
    ENDFUNC

    !Allow access to list lenght
    FUNC num worldZoneEvent_lenght()
        !RETURN list_lenght;
        RETURN LIST_worldZoneEvent_lenght(list);
    ENDFUNC

    !%%%% Event Handler %%%%

    !event_handler is the default target for events subscribed to this object
    LOCAL PROC event_handler(dataPointer pointer,dataPointer eventNote)
        !Add default event handeling here
    ENDPROC

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC worldZoneEvent_set(INOUT dataPointer pointer,worldZoneEvent value)
        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN ;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN ;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN ;
        !If the pointer is none of the above, create a new pointer with string val
        IF NOT USE_DYNAMIC_DATA_ALLOCATION pointer:=worldZoneEvent_(value);
        IF NOT USE_DYNAMIC_DATA_ALLOCATION RETURN ;
        !ERROR
        !Data Pointer Not set up
        errno_bookAndRaise ERR_BAD_DATA_POINTER;
    ERROR
        !RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC worldZoneEvent worldZoneEvent_get(dataPointer pointer)
        VAR worldZoneEvent returnValue;
        returnValue:=worldZoneEvent_NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        !RAISE ;
    ENDFUNC

    !Method for to create a value-datapointer from a value, or that points to a value
    FUNC dataPointer worldZoneEvent_(worldZoneEvent value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        !RAISE ;
    ENDFUNC

    ! %%%% LIST methods %%%%

    !Initialize new list
    PROC LIST_worldZoneEvent_clear(
        INOUT worldZoneEvent list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=worldZoneEvent_NULL;
        ENDFOR

        IF Present(lenght) lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_worldZoneEvent_append(
        INOUT worldZoneEvent list{*}
        \INOUT num lenght,
        worldZoneEvent item
        \INOUT num index)

        !Reject null input
        IF item=worldZoneEvent_NULL errno_bookAndRaise(ERR_UNEXPECTED_NULL);

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=worldZoneEvent_NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        IF Present(index) index:=lenght;

    ERROR
        !RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC worldZoneEvent LIST_worldZoneEvent_pop(
        INOUT worldZoneEvent list{*}
        \INOUT num lenght,
        \num index)

        VAR worldZoneEvent item;

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=worldZoneEvent_NULL;
            LIST_worldZoneEvent_del list \lenght?lenght \keepIndexes,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>worldZoneEvent_NULL THEN
                    item:=list{i};
                    list{i}:=worldZoneEvent_NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=worldZoneEvent_NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        !RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_worldZoneEvent_del(
        INOUT worldZoneEvent list{*}
        \INOUT num lenght
        \switch keepIndexes,
        num index)

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Delet data
        list{index}:=worldZoneEvent_NULL;

        !If indexes should be keept, then don't shift any data around
        IF Present(keepIndexes) RETURN ;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=worldZoneEvent_NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=worldZoneEvent_NULL;
        lenght:=lenght-1;

    ERROR
        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ERR_LIST_OUT_OF_RANGE;
        !RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list (not null)
    FUNC num LIST_worldZoneEvent_lenght(INOUT worldZoneEvent list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>worldZoneEvent_NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ERROR
        !RAISE ;
    ENDFUNC

    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ! Examples
    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENDMODULE