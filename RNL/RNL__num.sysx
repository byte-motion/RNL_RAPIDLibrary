MODULE RNL__num(SYSMODULE)

    !Datatype: num
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

    !    RECORD num
    !        dataPointer self;
    !        num exampleNumber1;
    !        num exampleNumber2;
    !        num exampleNumber3;
    !    ENDRECORD

    !A constant that can be searched for to determine if the module is loaded
    PERS dataType dataType_num:="num";

    !Per module setting for whether the list should be used
    !IF this bool is set to false then the NEW keyword
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_DYNAMIC_DATA_ALLOCATION:=FALSE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="";

    !Null constants
    CONST num num_NULL:=9E9;
    LOCAL CONST num num_DEFAULT:=0;

    !Pre declared list to be dynamically allocated
    LOCAL VAR num list{1};

    !interrupt for incomiung RMQ messages
    LOCAL VAR intnum RMQ_receive_intnum;

    !###########################################################################
    ! Standard Code
    !###########################################################################

    !### Constructors and Destructors ###

    !NEW constructor to allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
        VAR num data;
        VAR dataPointer self_;
        VAR dataPointer inheritanceParent;
        VAR dataPointer inheritanceParent_Pointer;

        self_:=pointer;
        IF Present(self) self_:=self;

        data:=num_DEFAULT;
        !data.self:=self_;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN

            !Set the rmqLocation to this task
            pointer.rmqLocation:=rmqQueue_SELF();

            !Allocate a list position
            pointer.type:=Type(list);
            LIST_num_append list,data\index:=pointer.id;

            IF NOT INHERITS_FROM="" THEN
                !Create nessesary inheritance chain
                inheritanceParent:=NEW_(INHERITS_FROM);
                inheritanceParent_Pointer:=NEW_("dataPointer");
                dataPointer_set inheritanceParent_Pointer,inheritanceParent;
                pointer.inheritanceParent_id:=inheritanceParent_Pointer.id;
                pointer.inheritanceParent_name:=inheritanceParent_Pointer.name;
            ENDIF

        ELSE

            !Create a string value datatype
            pointer:=num_(data);
        ENDIF

    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR num data;
        RMQGetMsgData message,data;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            NEW pointer;
            num_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=num_(data);

    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR num data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=num_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        RMQFindSlot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ENDPROC

    !Recives RMQ message of this datatype
    LOCAL TRAP RMQ_receive
        RMQ_receive_;
    ENDTRAP

    !Cleans up any datapointer
    LOCAL PROC ERASE(INOUT dataPointer pointer)

        VAR dataPointer inheritanceParent;

        !Call ERASE on the object that this object inherits from
        IF pointer.inheritanceParent_name<>""
            OR pointer.inheritanceParent_id>0 THEN
            inheritanceParent.id:=pointer.inheritanceParent_id;
            inheritanceParent.name:=pointer.inheritanceParent_name;

            ERASE_ inheritanceParent;
        ENDIF

        !ERASE
        IF dataPointer_isReference(pointer) num_set pointer,num_NULL;
        IF dataPointer_isIndex(pointer) LIST_num_del list\keepIndexes,pointer.id;
        pointer:=dataPointer_NULL;

    ENDPROC

    !### Direct Access to list ###

    !Allow acces to list
    FUNC num RNL__num_list(num i)
        RETURN list{i};
    ENDFUNC

    !Allow access to list lenght
    FUNC num RNL__num_lenght()
        !RETURN list_lenght;
        RETURN LIST_num_lenght(list);
    ENDFUNC

    !### DataPointer methods ###

    !Set a datapointers value
    PROC num_set(INOUT dataPointer pointer,num value)

        !If the pointer points to a different rmq location
        IF pointer.rmqLocation<>rmqQueue_NULL
        OR pointer.rmqLocation<>rmqQueue_SELF() THEN
            !
            !
        ENDIF


        !Inheritance

        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN ;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN ;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN ;
        !If the pointer is none of the above, create a new pointer with string val
        IF NOT USE_DYNAMIC_DATA_ALLOCATION pointer:=num_(value);
        IF NOT USE_DYNAMIC_DATA_ALLOCATION RETURN ;
        !ERROR
        !Data Pointer Not set up
        BookErrNo ERR_BAD_DATA_POINTER;
        RAISE ERR_BAD_DATA_POINTER;
    ERROR
        IF ERRNO=ERR_BAD_DATA_POINTER RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC num num_get(dataPointer pointer)
        VAR num returnValue;
        VAR dataPointer inheritancePointer;
        VAR dataPointer inheritancePointerPointer;

        !If the pointer points to a different rmq location
        IF pointer.rmqLocation<>rmqQueue_NULL
        OR pointer.rmqLocation<>rmqQueue_SELF() THEN
            !
            !
        ENDIF

        !Wrong datapointer type
        IF pointer.type<>Type(returnValue) THEN

            !Check if inheritance has right type
            WHILE TRUE DO

                !IF there are no more inheritance pointers, call error
                IF pointer.inheritanceParent_id=0 AND pointer.inheritanceParent_name="" THEN
                    BookErrNo ERR_BAD_DATA_POINTER;
                    RAISE ERR_BAD_DATA_POINTER;
                ENDIF

                !Find inheritance parent pointer
                inheritancePointerPointer.type:=Type(inheritancePointer);
                inheritancePointerPointer.name:=pointer.inheritanceParent_name;
                inheritancePointerPointer.id:=pointer.inheritanceParent_id;
                inheritancePointer:=dataPointer_get(inheritancePointerPointer);

                pointer:=inheritancePointer;

                !IF the inheritance parent pointer has the right type, return it
                IF pointer.type=Type(returnValue) RETURN num_get(pointer);

            ENDWHILE

        ENDIF

        returnValue:=num_NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;

    ERROR
        IF ERRNO=ERR_BAD_DATA_POINTER RAISE ;
    ENDFUNC

    !Method for to create a value-datapointer from a value,
    !or that points to a value
    FUNC dataPointer num_(num value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ENDFUNC

    !### LIST methods ###

    !Initialize new list
    PROC LIST_num_clear(
        INOUT num list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=num_NULL;
        ENDFOR

        IF Present(lenght) lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_num_append(
        INOUT num list{*}
        \INOUT num lenght,
        num item
        \INOUT num index)

        !Reject null input
        IF item=num_NULL THEN
            BookErrNo ERR_UNEXPECTED_NULL;
            RAISE ERR_UNEXPECTED_NULL;
        ENDIF

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=num_NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            !ERROR
            BookErrNo ERR_INDEX_OUT_OF_RANGE;
            RAISE ERR_INDEX_OUT_OF_RANGE;
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        IF Present(index) index:=lenght;

    ERROR
        IF ERRNO=ERR_UNEXPECTED_NULL RAISE ;
        IF ERRNO=ERR_INDEX_OUT_OF_RANGE RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC num LIST_num_pop(
        INOUT num list{*}
        \INOUT num lenght,
        \num index)

        VAR num item;

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght THEN
                BookErrNo ERR_LIST_OUT_OF_RANGE;
                RAISE ERR_LIST_OUT_OF_RANGE;
            ENDIF
        ENDIF

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=num_NULL;
            LIST_num_del list\lenght?lenght\keepIndexes,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>num_NULL THEN
                    item:=list{i};
                    list{i}:=num_NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=num_NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_num_del(
        INOUT num list{*}
        \INOUT num lenght
        \switch keepIndexes,
        num index)

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght THEN
                BookErrNo ERR_LIST_OUT_OF_RANGE;
                RAISE ERR_LIST_OUT_OF_RANGE;
            ENDIF
        ENDIF

        !Delet data
        list{index}:=num_NULL;

        !If indexes should be keept, then don't shift any data around
        IF Present(keepIndexes) RETURN ;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=num_NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=num_NULL;
        lenght:=lenght-1;

    ERROR
        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list (not null)
    FUNC num LIST_num_lenght(INOUT num list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>num_NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ENDFUNC


    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Required Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !Initialize
    LOCAL PROC config()

        !Connect RMQ interrupt
        CONNECT RMQ_receive_intnum WITH RMQ_receive;
        IRMQMessage num_NULL,RMQ_receive_intnum;

        !Clear list
        LIST_num_clear list;

    ENDPROC


    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer)
        VAR num data;

        !Add custom behavior for "executing" this datatype here

    ENDPROC

    !event_handler is the default target for events subscribed to this object
    LOCAL PROC event_handler(dataPointer pointer,dataPointer eventNote)
        !Add default event handeling here
    ENDPROC


    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================

    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------

    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data/Object Methods
    !///////////////////////////////////////////////////////////////////////////

    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ! Event Responses
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ! States
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ! Examples
    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENDMODULE