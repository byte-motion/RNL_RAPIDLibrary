MODULE RNL__errInfo(SYSMODULE)

    !This is the reference for all datatype/object modules. 
    !To create a new datatype copy this module and ctrl+f replace
    !"errInfo" With the new datatype, set the NULL value to a value
    !that will never be in use, and adjust the list{X} size.


    !Datatype: errInfo
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

    RECORD errInfo
        string context;
        num err_number;
        string err_name;
        string err_type;
        string err_domain;
        string err_text_title;
        string err_text_str1;
        string err_text_str2;
        string err_text_str3;
        string err_text_str4;
        string err_text_str5;
    ENDRECORD

    !A constant that can be searched for to determine if a datatype module is loaded
    PERS dataType dataType_errInfo:="errInfo";

    !Per module setting for whether the list should be used
    !IF this bool is set to false then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_DYNAMIC_DATA_ALLOCATION:=TRUE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="";

    !Null constants
    CONST errInfo errInfo_NULL:=["",-1,"","","","","","","","",""];
    LOCAL CONST errInfo errInfo_DEFAULT:=["",-1,"errInfo_DEFAULT","","","","","","","",""];

    !Pre declared list to be dynamically allocated
    LOCAL VAR errInfo list{50};
    !LOCAL VAR num list_lenght:=0;


    !*** Special data for RNL__errInfo ***

    !errinfo_interrupt_ holds the interrupt that catches all errors
    VAR intnum errinfo_interrupt_;

    !errinfo_interrupt_info holds the error information from the last error
    VAR errInfo errinfo_interrupt_info:=["",0,"","","","","","","","",""];


    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !NEW constructor with initial values
    FUNC dataPointer NEW_errInfo(
        \string contex
        \rmqQueue inRMQqueue
        )
        VAR dataPointer pointer;
        VAR errInfo data;

        VAR rmqCode_id rmqID;

        !Allocate and set data
        NEW pointer;

        !Set initial data 
        data:=errInfo_get(pointer);

        !Data without any setter function here
        !(Only for datatypes without inheritance)
        data:=errinfo_interrupt_info;
        IF Present(contex) data.context:=contex;


        errInfo_set pointer,data;

        !Data with setter functions here:

        !Present(exampleNumber1) setExampleNumber1 pointer exampleNumber1
        !Present(exampleNumber2) setExampleNumber2 pointer exampleNumber2
        !Present(exampleNumber3) setExampleNumber3 pointer exampleNumber3

        !IF a rmq location is specified, allocate the data there instead
        IF Present(inRMQqueue) THEN
            IF inRMQqueue<>rmqQueue_NULL AND inRMQqueue<>rmqQueue_SELF() THEN
                rmqID:=RMQ_start(inRMQqueue,pointer\allocate);
                ERASE pointer;
                pointer:=RMQ_wait(rmqID);
            ENDIF
        ENDIF

        !ALTERNATIVELY: send a new rmq command for data structures that are too large.

        !Return pointer
        RETURN pointer;
    ENDFUNC

    !NEW constructor to allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
        VAR errInfo data;
        VAR dataPointer self_;
        VAR dataPointer inheritanceParent;
        VAR dataPointer inheritanceParent_Pointer;

        self_:=pointer;
        IF Present(self) self_:=self;

        data:=errInfo_DEFAULT;
        !data.self:=self_;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN

            !Set the rmqLocation to this task
            pointer.rmqLocation:=rmqQueue_SELF();

            !Allocate a list position
            pointer.type:=Type(list);
            LIST_errInfo_append list,data\index:=pointer.id;

            IF NOT INHERITS_FROM="" THEN
                !Create nessesary inheritance chain
                inheritanceParent:=NEW_(INHERITS_FROM);
                inheritanceParent_Pointer:=NEW_("dataPointer");
                dataPointer_set inheritanceParent_Pointer,inheritanceParent;
                pointer.inheritanceParent_id:=inheritanceParent_Pointer.id;
                pointer.inheritanceParent_name:=inheritanceParent_Pointer.name;
            ENDIF

        ELSE

            !Create a string value datatype
            pointer:=errInfo_(data);
        ENDIF


    ERROR
        !RAISE ;
    ENDPROC

    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer)
        VAR errInfo data;

        !Add custom behavior for "executing" this datatype here
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR errInfo data;
        RMQGetMsgData message,data;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            NEW pointer;
            errInfo_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=errInfo_(data);

    ERROR
        !RAISE ;
    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR errInfo data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=errInfo_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        RMQFindSlot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ERROR
        !RAISE ;
    ENDPROC

    !Cleans up any datapointer
    LOCAL PROC ERASE(INOUT dataPointer pointer)

        VAR dataPointer inheritanceParent;

        !Call ERASE on the object that this object inherits from
        IF pointer.inheritanceParent_name<>""
            OR pointer.inheritanceParent_id>0 THEN
            inheritanceParent.id:=pointer.inheritanceParent_id;
            inheritanceParent.name:=pointer.inheritanceParent_name;

            ERASE_ inheritanceParent;
        ENDIF

        !ERASE
        IF dataPointer_isReference(pointer) errInfo_set pointer,errInfo_NULL;
        IF dataPointer_isIndex(pointer) LIST_errInfo_del list\keepIndexes,pointer.id;
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC


    !Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤
    ! WRAPPER Methods
    !Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤Â¤

    !    !Â¤Â¤Â¤ Get Self Â¤Â¤Â¤
    !    FUNC datapointer getSelf_(dataPointer pointer)
    !        VAR dataPointer self;
    !        try\obj:=pointer,"getSelf"\arg1_INOUT:=self\trowError;
    !        RETURN self;
    !    ERROR
    !        RAISE ;
    !    ENDFUNC

    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================

    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------

    !errinfo_interrupt catches the latest error and stores its information
    TRAP errinfo_interrupt

        VAR errnum errnum_;
        VAR datapos block;
        VAR string name;

        VAR errnum err_number;
        VAR string err_name;
        VAR string err_type;
        VAR errtype err_type_;
        VAR string err_domain;
        VAR errdomain err_domain_;
        VAR string err_text_title;
        VAR string err_text_str1;
        VAR string err_text_str2;
        VAR string err_text_str3;
        VAR string err_text_str4;
        VAR string err_text_str5;

        VAR trapdata trapEvent;

        !Get the error data

        GetTrapData trapEvent;

        ReadErrData trapEvent,err_domain_,err_number,err_type_
        \Title:=err_text_title
        \Str1:=err_text_str1
        \Str2:=err_text_str2
        \Str3:=err_text_str3
        \Str4:=err_text_str4
        \Str5:=err_text_str5;

        !Convert the error data to strings

        IF err_type_=TYPE_ALL err_type:="00:TYPE_ALL";
        IF err_type_=TYPE_STATE err_type:="01:TYPE_STATE";
        IF err_type_=TYPE_WARN err_type:="02:TYPE_WARN";
        IF err_type_=TYPE_ERR err_type:="03:TYPE_ERR";

        IF err_domain_=COMMON_ERR err_domain:="00:COMMON_ERR";
        IF err_domain_=OP_STATE err_domain:="01:OP_STATE";
        IF err_domain_=SYSTEM_ERR err_domain:="02:SYSTEM_ERR";
        IF err_domain_=HARDWARE_ERR err_domain:="03:HARDWARE_ERR";
        IF err_domain_=PROGRAM_ERR err_domain:="04:PROGRAM_ERR";
        IF err_domain_=MOTION_ERR err_domain:="05:MOTION_ERR";
        IF err_domain_=OPERATOR_ERR err_domain:="06:OPERATOR_ERR";
        IF err_domain_=IO_COM_ERR err_domain:="07:IO_COM_ERR";
        IF err_domain_=USER_DEF_ERR err_domain:="08:USER_DEF_ERR";
        IF err_domain_=SAFETY_ERR err_domain:="09:SAFETY_ERR";
        IF err_domain_=PROCESS_ERR err_domain:="11:PROCESS_ERR";
        IF err_domain_=CFG_ERR err_domain:="10:CFG_ERR";

!        !Search for the name of the errnum that was returned
!        SetDataSearch "errnum";
!        err_name:="";
!        WHILE GetNextSym(name,block\Recursive) AND err_name="" DO
!            GetDataVal name\Block:=block,errnum_;
!            IF err_number=errnum_ err_name:=name;
!        ENDWHILE


        !Write the error information to the holding data 

        errinfo_interrupt_info.context:="";
        errinfo_interrupt_info.err_number:=err_number;
        errinfo_interrupt_info.err_name:="";
        errinfo_interrupt_info.err_type:=err_type;
        errinfo_interrupt_info.err_domain:=err_domain;
        errinfo_interrupt_info.err_text_title:=err_text_title;
        errinfo_interrupt_info.err_text_str1:=err_text_str1;
        errinfo_interrupt_info.err_text_str2:=err_text_str2;
        errinfo_interrupt_info.err_text_str3:=err_text_str3;
        errinfo_interrupt_info.err_text_str4:=err_text_str4;
        errinfo_interrupt_info.err_text_str5:=err_text_str5;

    ENDTRAP


    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data/Object Methods
    !///////////////////////////////////////////////////////////////////////////

    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ! Event Responses
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ! States
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    !    !&&& Get Self &&&
    !    LOCAL PROC getSelf(dataPointer pointer,INOUT datapointer self)
    !        VAR errInfo object;
    !        object:=errInfo_get(pointer);
    !        self:=object.self;
    !    ENDPROC

    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% Initialize the list %%%%

    !Initialize the list and interrupt
    LOCAL PROC config()

        LIST_errInfo_clear list;

        CONNECT errinfo_interrupt_ WITH errinfo_interrupt;
        IError COMMON_ERR,TYPE_ALL,errinfo_interrupt_;

    ENDPROC

    !%%%% Direct Access to list %%%%

    !Allow acces to list
    FUNC errInfo errInfo_list(num i)
        RETURN list{i};
    ENDFUNC

    !Allow access to list lenght
    FUNC num errInfo_lenght()
        !RETURN list_lenght;
        RETURN LIST_errInfo_lenght(list);
    ENDFUNC

    !%%%% Event Handler %%%%

    !event_handler is the default target for events subscribed to this object
    LOCAL PROC event_handler(dataPointer pointer,dataPointer eventNote)
        !Add default event handeling here
    ENDPROC

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC errInfo_set(INOUT dataPointer pointer,errInfo value)

        !If the pointer points to a different rmq location
        IF pointer.rmqLocation<>rmqQueue_NULL
        OR pointer.rmqLocation<>rmqQueue_SELF() THEN
            !
            !
        ENDIF


        !Inheritance

        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN ;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN ;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN ;
        !If the pointer is none of the above, create a new pointer with string val
        IF NOT USE_DYNAMIC_DATA_ALLOCATION pointer:=errInfo_(value);
        IF NOT USE_DYNAMIC_DATA_ALLOCATION RETURN ;
        !ERROR
        !Data Pointer Not set up
        errno_bookAndRaise ERR_BAD_DATA_POINTER;
    ERROR
        !RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC errInfo errInfo_get(dataPointer pointer)
        VAR errInfo returnValue;
        VAR dataPointer inheritancePointer;
        VAR dataPointer inheritancePointerPointer;

        !If the pointer points to a different rmq location
        IF pointer.rmqLocation<>rmqQueue_NULL
        OR pointer.rmqLocation<>rmqQueue_SELF() THEN
            !
            !
        ENDIF

        !Wrong datapointer type
        IF pointer.type<>type(returnValue) THEN

            !Check if inheritance has right type
            WHILE TRUE DO

                !IF there are no more inheritance pointers, call error
                IF pointer.inheritanceParent_id=0 AND pointer.inheritanceParent_name=""
                errno_bookandraise ERR_BAD_DATA_POINTER;

                !Find inheritance parent pointer
                inheritancePointerPointer.type:=type(inheritancePointer);
                inheritancePointerPointer.name:=pointer.inheritanceParent_name;
                inheritancePointerPointer.id:=pointer.inheritanceParent_id;
                inheritancePointer:=dataPointer_get(inheritancePointerPointer);

                pointer:=inheritancePointer;

                !IF the inheritance parent pointer has the right type, return it
                IF pointer.type=type(returnValue) RETURN errInfo_get(pointer);


            ENDWHILE

        ENDIF

        returnValue:=errInfo_NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        RAISE ;
    ENDFUNC

    !Method for to create a value-datapointer from a value, or that points to a value
    FUNC dataPointer errInfo_(errInfo value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        !RAISE ;
    ENDFUNC

    ! %%%% LIST methods %%%%

    !Initialize new list
    PROC LIST_errInfo_clear(
        INOUT errInfo list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=errInfo_NULL;
        ENDFOR

        IF Present(lenght) lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_errInfo_append(
        INOUT errInfo list{*}
        \INOUT num lenght,
        errInfo item
        \INOUT num index)

        !Reject null input
        IF item=errInfo_NULL errno_bookAndRaise(ERR_UNEXPECTED_NULL);

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=errInfo_NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            !ERROR
            BookErrNo ERR_INDEX_OUT_OF_RANGE;
            RAISE ERR_INDEX_OUT_OF_RANGE;
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        IF Present(index) index:=lenght;

    ERROR
        !RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC errInfo LIST_errInfo_pop(
        INOUT errInfo list{*}
        \INOUT num lenght,
        \num index)

        VAR errInfo item;

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=errInfo_NULL;
            LIST_errInfo_del list\lenght?lenght\keepIndexes,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>errInfo_NULL THEN
                    item:=list{i};
                    list{i}:=errInfo_NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=errInfo_NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        !RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_errInfo_del(
        INOUT errInfo list{*}
        \INOUT num lenght
        \switch keepIndexes,
        num index)

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Delet data
        list{index}:=errInfo_NULL;

        !If indexes should be keept, then don't shift any data around
        IF Present(keepIndexes) RETURN ;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=errInfo_NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=errInfo_NULL;
        lenght:=lenght-1;

    ERROR
        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ERR_LIST_OUT_OF_RANGE;
        !RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list (not null)
    FUNC num LIST_errInfo_lenght(INOUT errInfo list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>errInfo_NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ERROR
        !RAISE ;
    ENDFUNC

    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ! Examples
    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENDMODULE