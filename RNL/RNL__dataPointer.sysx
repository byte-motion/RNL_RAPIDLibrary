MODULE RNL__dataPointer(SYSMODULE)

    !dataPointer is a module that enables the late binding of data through generic, universal data pointers
    !data pointers allow us to access and pass data without having to specify a data type.
    !data pointers are therefore essential for creating complex patterns in RAPID, like
    !objects, object inheritance, events, state machines and so on.

    !***************************************************************************
    ! Data
    !***************************************************************************

    !Dependencies:
    ! - none

    ALIAS string dataType;
    ALIAS string dataTypeModule;
    ALIAS string dataName;
    ALIAS string dataValue;

    !dataPointer contains the nessesary infromation to late bind to data.
    RECORD dataPointer
        dataType type;
        dataName name;
        num id;
        dataValue value;
        dataName inheritanceParent_name;
        num inheritanceParent_id;
        rmqQueue rmqLocation;
    ENDRECORD
    
    !Per module setting for whether the list should be used
    !IF this bool is set to false (default) then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_LIST:=TRUE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="";

    !Null values
    CONST dataPointer dataPointer_NULL:=["","",0,"","",0,""];
    LOCAL CONST dataPointer NULL:=["","",0,"","",0,""];

    !Pre declared list to be dynamically allocated
    LOCAL VAR dataPointer list{400};
    LOCAL VAR num list_lenght:=0;

    !Error data
    VAR errnum ERR_BAD_DATA_POINTER:=-1;

    PERS dataType dataType_signaldi:="signaldi";
    PERS dataType dataType_signaldo:="signaldo";
    PERS dataType dataType_signalgi:="signalgi";
    PERS dataType dataType_signalgo:="signalgo";
    PERS dataType dataType_signalai:="signalai";
    PERS dataType dataType_signalao:="signalao";
    
    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !Allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
        VAR dataPointer data;
        VAR dataPointer self_;
        VAR dataPointer inheritanceParent;

        self_:=pointer;
        IF Present(self) self_:=self;

        IF USE_LIST THEN
            
            pointer.type:=Type(list);
            LIST_dataPointer_append list\lenght:=list_lenght,data\index:=pointer.id;

            IF NOT INHERITS_FROM="" THEN
                !Inheritance:
                inheritanceParent:=NEW_("INHERITS_FROM");
                pointer.inheritanceParent_id := inheritanceParent.id;
                pointer.inheritanceParent_name := inheritanceParent.name;
            ENDIF

        ELSE
            pointer:=dataPointer_(dataPointer_NULL);
        ENDIF
        
        ERROR
            RAISE ;
        ENDPROC

        !Resolve an RMQ_execute command for this datatype. Return result
        LOCAL PROC RMQ_execute(INOUT dataPointer pointer,VAR rmqmessage message)
            VAR dataPointer data;
            RMQGetMsgData message,data;

            !Add custom behavior for this datatype here
            pointer:=dataPointer_NULL;

        ERROR
            RAISE ;
        ENDPROC

        !Allocate a data, set the data to recived RMQ message, and return pointer
        LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

            VAR dataPointer data;
            RMQGetMsgData message,data;

            IF USE_LIST THEN
                NEW pointer;
                dataPointer_set pointer,data;
                RETURN ;
            ENDIF

            pointer:=dataPointer_(data);

        ERROR
            RAISE ;
        ENDPROC

        !Send RMQ message of this datatype
        LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
            VAR dataPointer data_;
            VAR string queue_;
            VAR num code_;

            VAR rmqslot slot;

            data_:=dataPointer_get(data);
            queue_:=string_get(queue);
            code_:=num_get(code);

            rmqfindslot slot,queue_;
            RMQSendMessage slot,data_\UserDef:=code_;

        ERROR
            RAISE ;
        ENDPROC

        LOCAL PROC ERASE(INOUT dataPointer pointer)
            IF dataPointer_isReference(pointer) dataPointer_set pointer,NULL;
            IF dataPointer_isIndex(pointer) LIST_dataPointer_del list\lenght:=list_lenght,pointer.id;
            pointer:=dataPointer_NULL;
        ERROR
            RAISE ;
        ENDPROC
        
    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data Methods
    !///////////////////////////////////////////////////////////////////////////

    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================
        
    !    !ref() Generates a data pointer that points to the supplied data symbol
    !    !it is designed to be short, easy to remember, and universal
    !    !You can feed it one of the buildt in data types, or feed it 
    !    !a custom data type manually through A_name, A_Type, and A_Value.
    !    !If the \global optional argument is included then it will force the 
    !    ! pointer to be a reference to the orignial object
    !    FUNC dataPointer ref(
    !        \num num_
    !        |dnum dnum_
    !        |string string_
    !        |bool bool_
    !        |byte byte_

    !        |pos pos_
    !        |pose pose_
    !        |orient orient_

    !        |confdata confdata_
    !        |extjoint extjoint_

    !        |robtarget robtarget_
    !        |jointtarget jointtarget_
    !        |jointtarget robjoint_

    !        |tooldata tooldata_
    !        |loaddata loaddata_
    !        |wobjdata wopbjdata_
    !        |speeddata speeddata_
    !        |zonedata zonedata_

    !        |var signaldi signaldi_
    !        |var signaldo signaldo_
    !        |var signalgi signalgi_
    !        |var signalgo signalgo_
    !        |var signalai signalai_
    !        |var signalao signalao_

    !        |dataPointer dataPointer_
    !        |event event_

    !        \switch global

    !        \string A_name
    !        \string A_type
    !        \string A_value
    !        )

    !        VAR dataPointer pointer;

    !        IF Present(num_) pointer.type:=Type(num_);
    !        IF Present(num_) pointer.name:=ArgName(num_);
    !        IF Present(num_) pointer.value:=ValToStr(num_);

    !        IF Present(dnum_) pointer.type:=Type(dnum_);
    !        IF Present(dnum_) pointer.name:=ArgName(dnum_);
    !        IF Present(dnum_) pointer.value:=ValToStr(dnum_);

    !        IF Present(string_) pointer.type:=Type(string_);
    !        IF Present(string_) pointer.name:=ArgName(string_);
    !        IF Present(string_) pointer.value:=ValToStr(string_);

    !        IF Present(bool_) pointer.type:=Type(bool_);
    !        IF Present(bool_) pointer.name:=ArgName(bool_);
    !        IF Present(bool_) pointer.value:=ValToStr(bool_);

    !        IF Present(byte_) pointer.type:=Type(byte_);
    !        IF Present(byte_) pointer.name:=ArgName(byte_);
    !        IF Present(byte_) pointer.value:=ValToStr(byte_);

    !        IF Present(pos_) pointer.type:=Type(pos_);
    !        IF Present(pos_) pointer.name:=ArgName(pos_);
    !        IF Present(pos_) pointer.value:=ValToStr(pos_);

    !        IF Present(pose_) pointer.type:=Type(pose_);
    !        IF Present(pose_) pointer.name:=ArgName(pose_);
    !        IF Present(pose_) pointer.value:=ValToStr(pose_);

    !        IF Present(orient_) pointer.type:=Type(orient_);
    !        IF Present(orient_) pointer.name:=ArgName(orient_);
    !        IF Present(orient_) pointer.value:=ValToStr(orient_);

    !        IF Present(confdata_) pointer.type:=Type(confdata_);
    !        IF Present(confdata_) pointer.name:=ArgName(confdata_);
    !        IF Present(confdata_) pointer.value:=ValToStr(confdata_);

    !        IF Present(extjoint_) pointer.type:=Type(extjoint_);
    !        IF Present(extjoint_) pointer.name:=ArgName(extjoint_);
    !        IF Present(extjoint_) pointer.value:=ValToStr(extjoint_);

    !        IF Present(robtarget_) pointer.type:=Type(robtarget_);
    !        IF Present(robtarget_) pointer.name:=ArgName(robtarget_);
    !        IF Present(robtarget_) pointer.value:=ValToStr(robtarget_);

    !        IF Present(jointtarget_) pointer.type:=Type(jointtarget_);
    !        IF Present(jointtarget_) pointer.name:=ArgName(jointtarget_);
    !        IF Present(jointtarget_) pointer.value:=ValToStr(jointtarget_);

    !        IF Present(robjoint_) pointer.type:=Type(robjoint_);
    !        IF Present(robjoint_) pointer.name:=ArgName(robjoint_);
    !        IF Present(robjoint_) pointer.value:=ValToStr(robjoint_);

    !        IF Present(tooldata_) pointer.type:=Type(tooldata_);
    !        IF Present(tooldata_) pointer.name:=ArgName(tooldata_);
    !        IF Present(tooldata_) pointer.value:=ValToStr(tooldata_);

    !        IF Present(loaddata_) pointer.type:=Type(loaddata_);
    !        IF Present(loaddata_) pointer.name:=ArgName(loaddata_);
    !        IF Present(loaddata_) pointer.value:=ArgName(loaddata_);

    !        IF Present(wopbjdata_) pointer.type:=Type(wopbjdata_);
    !        IF Present(wopbjdata_) pointer.name:=ArgName(wopbjdata_);
    !        IF Present(wopbjdata_) pointer.value:=ValToStr(wopbjdata_);

    !        IF Present(speeddata_) pointer.type:=Type(speeddata_);
    !        IF Present(speeddata_) pointer.name:=ArgName(speeddata_);
    !        IF Present(speeddata_) pointer.value:=ValToStr(speeddata_);

    !        IF Present(zonedata_) pointer.type:=Type(zonedata_);
    !        IF Present(zonedata_) pointer.name:=ArgName(zonedata_);
    !        IF Present(zonedata_) pointer.value:=ValToStr(zonedata_);

    !        IF Present(signaldi_) pointer.type:=Type(signaldi_);
    !        IF Present(signaldi_) pointer.name:=ArgName(signaldi_);

    !        IF Present(signaldo_) pointer.type:=Type(signaldo_);
    !        IF Present(signaldo_) pointer.name:=ArgName(signaldo_);

    !        IF Present(signalgi_) pointer.type:=Type(signalgi_);
    !        IF Present(signalgi_) pointer.name:=ArgName(signalgi_);

    !        IF Present(signalgo_) pointer.type:=Type(signalgo_);
    !        IF Present(signalgo_) pointer.name:=ArgName(signalgo_);

    !        IF Present(signalai_) pointer.type:=Type(signalai_);
    !        IF Present(signalai_) pointer.name:=ArgName(signalai_);

    !        IF Present(signalao_) pointer.type:=Type(signalao_);
    !        IF Present(signalao_) pointer.name:=ArgName(signalao_);

    !        IF Present(dataPointer_) pointer.type:=Type(dataPointer_);
    !        IF Present(dataPointer_) pointer.name:=ArgName(dataPointer_);
    !        IF Present(dataPointer_) pointer.value:=ValToStr(dataPointer_);

    !        IF Present(event_) pointer.type:=Type(event_);
    !        IF Present(event_) pointer.name:=ArgName(event_);
    !        IF Present(event_) pointer.value:=ValToStr(event_);


    !        !If data is set both automatically and manually, error
    !        IF pointer<>dataPointer_NULL
    !        AND (Present(A_name) OR Present(A_type) OR Present(A_value)) THEN
    !            !ERROR
    !            ErrWrite "ref() - Conflicting Arguments","";
    !            stop;
    !        ENDIF

    !        !Set name and type manually
    !        IF Present(A_name) pointer.name:=A_name;

    !        !Set type manually
    !        IF Present(A_type) pointer.type:=A_type;

    !        !Set Value manually
    !        IF Present(A_value) pointer.value:=A_value;

    !        !determine if pointer should be a named reference,
    !        !or a nameless value
    !        IF Present(A_name) or Present(global) THEN
    !            pointer.value:="";
    !        ELSE
    !            pointer.name:="";
    !        ENDIF

    !        !Check completeness
    !        IF pointer.type="" THEN
    !            !ERROR
    !            ErrWrite "ref() - Missing Type","";
    !            stop;
    !        ENDIF

    !        IF pointer.name="" AND pointer.value="" THEN
    !            !ERROR

    !            !This is actually allowed in certain situations. 

    !            !ErrWrite "ref() - Missing Data","";
    !            !stop;
    !        ENDIF

    !        RETURN pointer;

    !    ERROR

    !        IF ERRNO=ERR_ARGNAME TRYNEXT;
    !        RAISE ;

    !    ENDFUNC

    !Returns true if data pointer contains a global reference pointer
    FUNC bool dataPointer_isReference(dataPointer pointer)
        RETURN NOT pointer.name="";
    ENDFUNC

    !Returns true if data pointer contains a local string value
    FUNC bool dataPointer_isValue(dataPointer pointer)
        RETURN NOT pointer.value="";
    ENDFUNC

    !Returns true if data pointer contains a index
    FUNC bool dataPointer_isIndex(dataPointer pointer)
        RETURN pointer.id>0;
    ENDFUNC

    !Returns true if data pointer contains a reference to a semi-value IO signal
    !(semi-value IO signal can be connected via alias)
    FUNC bool dataPointer_isIO(dataPointer pointer)
        RETURN pointer.type=dataType_signaldi
        OR pointer.type=dataType_signaldo
        OR pointer.type=dataType_signalgi
        OR pointer.type=dataType_signalgo
        OR pointer.type=dataType_signalai
        OR pointer.type=dataType_signalao;
    ENDFUNC

    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC dataPointer_set(INOUT dataPointer pointer,dataPointer value)
        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN;
        !ERROR
        !Data Pointer Not set up
        errno_bookAndRaise ERR_BAD_DATA_POINTER;    ERROR
        RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC dataPointer dataPointer_get(dataPointer pointer)
        VAR dataPointer returnValue;
        returnValue:=NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        RAISE ;
    ENDFUNC

    !Create a value-datapointer from a value, or that points to a value
    FUNC dataPointer dataPointer_(dataPointer value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        RAISE ;
    ENDFUNC

    ! %%%% LIST methods %%%%

    !Initialize new list
    PROC LIST_dataPointer_NEW(
        INOUT dataPointer list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=NULL;
        ENDFOR

        lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_dataPointer_append(
        INOUT dataPointer list{*}
        \INOUT num lenght,
        dataPointer item
        \INOUT num index)

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        index:=lenght;

    ERROR
        RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC dataPointer LIST_dataPointer_pop(
        INOUT dataPointer list{*}
        \INOUT num lenght,
        \num index)

        VAR dataPointer item;

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=NULL;
            LIST_dataPointer_del list\lenght?lenght,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>NULL THEN
                    item:=list{i};
                    list{i}:=NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_dataPointer_del(
        INOUT dataPointer list{*}
        \INOUT num lenght,
        num index)

        list{index}:=NULL;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=NULL;

    ERROR
        RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list
    FUNC num LIST_dataPointer_lenght(INOUT dataPointer list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ERROR
        RAISE ;
    ENDFUNC


ENDMODULE