MODULE RNL__digitalSensor(SYSMODULE)

    !Datatype: digitalSensor
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

    RECORD digitalSensor
        dataPointer self;
        dataPointer signal;
        dataPointer ioEvent_low;
        dataPointer ioEvent_high;
        dataPointer ioEvent_edge;
    ENDRECORD

    !Events
    PERS event SIGNAL_LOW;
    PERS event SIGNAL_HIGH;
    PERS event SIGNAL_EDGE;
    PERS event SIGNAL_CHANGED;

    !A constant that can be searched for to determine if a datatype module is loaded
    PERS dataType dataType_digitalSensor:="digitalSensor";

    !Per module setting for whether the list should be used
    !IF this bool is set to false then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_DYNAMIC_DATA_ALLOCATION:=TRUE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="baseObject";

    !Null constants
    CONST digitalSensor digitalSensor_NULL:=[["","",9E9,"","",9E9,""],["","",9E9,"","",9E9,""],["","",9E9,"","",9E9,""],["","",9E9,"","",9E9,""],["","",9E9,"","",9E9,""]];
    LOCAL CONST digitalSensor digitalSensor_DEFAULT:=[["","",0,"","",0,""],["","",0,"","",0,""],["","",0,"","",0,""],["","",0,"","",0,""],["","",0,"","",0,""]];

    !Pre delcared list to be dynamically allocated
    LOCAL VAR digitalSensor list{50};
    !LOCAL VAR num list_lenght:=0;

    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !NEW constructor with initial values
    FUNC dataPointer NEW_digitalSensor(
        \dataPointer signal
        |string signalName
        )
        VAR dataPointer pointer;
        VAR digitalSensor data;

        VAR dataPointer signal_;

        !Allocate and set data
        NEW pointer;

        !Set initial data 
        data:=digitalSensor_get(pointer);

        digitalSensor_set pointer,data;

        !set up signal
        signal_.type:=datatype_signaldi;
        signal_.name:="";
        IF Present(signal) signal_:=signal;
        IF Present(signalName) signal_.name:=signalName;

        !Set signal
        IF signal_.name<>"" setSignal_ pointer,signal_;

        !Return pointer
        RETURN pointer;
    ENDFUNC

    !NEW constructor to allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
        VAR digitalSensor data;
        VAR dataPointer self_;
        VAR dataPointer inheritanceParent;
        VAR dataPointer inheritanceParent_Pointer;

        self_:=pointer;
        IF Present(self) self_:=self;

        data:=digitalSensor_DEFAULT;
        data.self:=self_;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            
            !Set the rmqLocation to this task
            pointer.rmqLocation := rmqQueue_SELF();
            
            !Allocate a list position
            pointer.type:=Type(list);
            LIST_digitalSensor_append list,data\index:=pointer.id;

            IF NOT INHERITS_FROM="" THEN
                !Create nessesary inheritance chain
                inheritanceParent:=NEW_(INHERITS_FROM);
                inheritanceParent_Pointer:=NEW_("dataPointer");
                dataPointer_set inheritanceParent_Pointer,inheritanceParent;
                pointer.inheritanceParent_id:=inheritanceParent_Pointer.id;
                pointer.inheritanceParent_name:=inheritanceParent_Pointer.name;
            ENDIF

        ELSE
            !Create a string value datatype
            pointer:=digitalSensor_(data);
        ENDIF


    ERROR
        !RAISE ;
    ENDPROC

    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer,VAR rmqmessage message)
        VAR digitalSensor data;
        RMQGetMsgData message,data;

        !Add custom behavior for "executing" this datatype here
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR digitalSensor data;
        RMQGetMsgData message,data;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            NEW pointer;
            digitalSensor_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=digitalSensor_(data);

    ERROR
        !RAISE ;
    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR digitalSensor data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=digitalSensor_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        RMQFindSlot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ERROR
        !RAISE ;
    ENDPROC

    !Cleans up any datapointer
    LOCAL PROC ERASE(INOUT dataPointer pointer)

        VAR dataPointer inheritanceParent;

        !Call ERASE on the object that this object inherits from
        IF pointer.inheritanceParent_name<>""
            OR pointer.inheritanceParent_id>0 THEN
            inheritanceParent.id:=pointer.inheritanceParent_id;
            inheritanceParent.name:=pointer.inheritanceParent_name;

            ERASE_ inheritanceParent;
        ENDIF

        !ERASE
        IF dataPointer_isReference(pointer) digitalSensor_set pointer,digitalSensor_NULL;
        IF dataPointer_isIndex(pointer) LIST_digitalSensor_del list\keepIndexes,pointer.id;
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC


    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    ! ¤¤¤ Signal ¤¤¤
    PROC setSignal_(dataPointer pointer,dataPointer signal)
        try\obj:=pointer,"setSignal"\arg1:=signal\trowError;
    ENDPROC

    FUNC dataPointer getSignal_(dataPointer pointer)
        VAR dataPointer signal;
        try\obj:=pointer,"getSignal"\arg1_INOUT:=signal\trowError;
        RETURN signal;
    ENDFUNC

    ! ¤¤¤ Mute/Unmute ¤¤¤
    PROC mute_(dataPointer pointer)
        try \obj:=pointer, "mute"\trowError;
    ENDPROC
    
    PROC unmute_(dataPointer pointer)
        try \obj:=pointer, "unmute_"\trowError;
    ENDPROC
    
    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================

    ! === Mute/Unmute ===
    LOCAL PROC mute(dataPointer pointer)
        VAR digitalSensor object;
        object := digitalSensor_get(pointer);
        
        !Erase ioEvents
        ERASE_ object.ioEvent_low;
        ERASE_ object.ioEvent_high;
        ERASE_ object.ioEvent_edge;
        
        digitalSensor_set pointer,object;
    ENDPROC

    LOCAL PROC unmute(dataPointer pointer)
        VAR digitalSensor object;
        object := digitalSensor_get(pointer);
        
        !Recreate ioEvents
        ERASE_ object.ioEvent_low;
        ERASE_ object.ioEvent_high;
        ERASE_ object.ioEvent_edge;
        object.ioEvent_low:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_LOW\digital_TriggValue:=low);
        object.ioEvent_high:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_HIGH\digital_TriggValue:=high);
        object.ioEvent_edge:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_EDGE\digital_TriggValue:=edge);
        
        digitalSensor_set pointer,object;
    ENDPROC


    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------

    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data/Object Methods
    !///////////////////////////////////////////////////////////////////////////

    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ! Event Responses
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ! States
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    ! &&& Signal &&&
    LOCAL PROC setSignal(dataPointer pointer,dataPointer signal)
        VAR digitalSensor object;
        object:=digitalSensor_get(pointer);

        !Save signal
        object.signal:=signal;

        !ERASE old ioEvents, and create new ones
        ERASE_ object.ioEvent_low;
        ERASE_ object.ioEvent_high;
        ERASE_ object.ioEvent_edge;
        object.ioEvent_low:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_LOW\digital_TriggValue:=low);
        object.ioEvent_high:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_HIGH\digital_TriggValue:=high);
        object.ioEvent_edge:=NEW_ioEvent(\signal:=object.signal\triggerObject:=object.self\triggerEvent:=SIGNAL_EDGE\digital_TriggValue:=edge);

        digitalSensor_set pointer,object;

        TRIGGER\object:=object.self,SIGNAL_CHANGED\data:=signal;
    ENDPROC

    LOCAL PROC getSignal(dataPointer pointer,INOUT dataPointer signal)
        VAR digitalSensor object;
        signal:=object.signal;
    ENDPROC



    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% Initialize the list %%%%

    !Initialize the list
    LOCAL PROC config()
        LIST_digitalSensor_clear list;
    ENDPROC

    !%%%% Direct Access to list %%%%

    !Allow acces to list
    FUNC digitalSensor digitalSensor_list(num i)
        RETURN list{i};
    ENDFUNC

    !Allow access to list lenght
    FUNC num digitalSensor_lenght()
        !RETURN list_lenght;
        RETURN LIST_digitalSensor_lenght(list);
    ENDFUNC

    !%%%% Event Handler %%%%

    !event_handler is the default target for events subscribed to this object
    LOCAL PROC event_handler(dataPointer pointer,dataPointer eventNote)
        !Add default event handeling here
    ENDPROC

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC digitalSensor_set(INOUT dataPointer pointer,digitalSensor value)
        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        !If the pointer is none of the above, create a new pointer with string val
        pointer:=digitalSensor_(value);
    ERROR
        !RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC digitalSensor digitalSensor_get(dataPointer pointer)
        VAR digitalSensor returnValue;
        returnValue:=digitalSensor_NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        !RAISE ;
    ENDFUNC

    !Method for to create a value-datapointer from a value, or that points to a value
    FUNC dataPointer digitalSensor_(digitalSensor value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        !RAISE ;
    ENDFUNC

    ! %%%% LIST methods %%%%

    !Initialize new list
    PROC LIST_digitalSensor_clear(
        INOUT digitalSensor list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=digitalSensor_NULL;
        ENDFOR

        IF Present(lenght) lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_digitalSensor_append(
        INOUT digitalSensor list{*}
        \INOUT num lenght,
        digitalSensor item
        \INOUT num index)

        !Reject null input
        IF item=digitalSensor_NULL errno_bookAndRaise(ERR_UNEXPECTED_NULL);

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=digitalSensor_NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        IF Present(index) index:=lenght;

    ERROR
        !RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC digitalSensor LIST_digitalSensor_pop(
        INOUT digitalSensor list{*}
        \INOUT num lenght,
        \num index)

        VAR digitalSensor item;

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=digitalSensor_NULL;
            LIST_digitalSensor_del list \lenght?lenght \keepIndexes,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>digitalSensor_NULL THEN
                    item:=list{i};
                    list{i}:=digitalSensor_NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=digitalSensor_NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        !RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_digitalSensor_del(
        INOUT digitalSensor list{*}
        \INOUT num lenght
        \switch keepIndexes,
        num index)

        !Reject indexes ouside of lenght
        IF Present(lenght) AND Present(index) THEN
            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
        ENDIF

        !Delet data
        list{index}:=digitalSensor_NULL;

        !If indexes should be keept, then don't shift any data around
        IF Present(keepIndexes) RETURN ;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=digitalSensor_NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=digitalSensor_NULL;
        lenght:=lenght-1;

    ERROR
        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ERR_LIST_OUT_OF_RANGE;
        !RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list (not null)
    FUNC num LIST_digitalSensor_lenght(INOUT digitalSensor list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>digitalSensor_NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ERROR
        !RAISE ;
    ENDFUNC

    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ! Examples
    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENDMODULE