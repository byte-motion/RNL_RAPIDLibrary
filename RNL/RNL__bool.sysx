MODULE RNL__bool(SYSMODULE)

    !This is the reference for all datatype/object modules. 
    !To create a new datatype copy this module and ctrl+f replace
    !"bool" With the new datatype, set the NULL value to a value
    !that will never be in use, and adjust the list{X} size.
    

    !Datatype: bool
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

!    RECORD bool
!        dataPointer self;
!        num exampleNumber1;
!        num exampleNumber2;
!        num exampleNumber3;
!    ENDRECORD

    !A constant that can be searched for to determine if a datatype module is loaded
    PERS dataType dataType_bool:="bool";

    !Per module setting for whether the list should be used
    !IF this bool is set to false then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_DYNAMIC_DATA_ALLOCATION:=FALSE;

    !INHERITS_FROM is the type that this type inherits from.
    ! "" signifies no inheritance
    LOCAL CONST dataType INHERITS_FROM:="";

    !Null constants
    !CONST bool bool_NULL:=[["","",0,"","",0,""],0,0,0];
    !LOCAL CONST bool bool_DEFAULT:=[["","",0,"","",0,""],0,0,0];

    !Pre declared list to be dynamically allocated
    LOCAL VAR bool list{200};
    !LOCAL VAR num list_lenght:=0;

    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !NEW constructor with initial values
!    FUNC dataPointer NEW_bool(
!        \num exampleNumber1
!        \num exampleNumber2
!        \num exampleNumber3
!        )
!        VAR dataPointer pointer;
!        VAR bool data;

!        !Allocate and set data
!        NEW pointer;

!        !Set initial data 
!        data:=bool_get(pointer);

!        !Data without any setter function here
!        !(Only for datatypes without inheritance)
!        IF Present(exampleNumber1) data.exampleNumber1:=exampleNumber1;
!        IF Present(exampleNumber2) data.exampleNumber2:=exampleNumber2;
!        IF Present(exampleNumber3) data.exampleNumber3:=exampleNumber3;

!        bool_set pointer,data;

!        !Data with setter functions here:
        
!        !Present(exampleNumber1) setExampleNumber1 pointer exampleNumber1
!        !Present(exampleNumber2) setExampleNumber2 pointer exampleNumber2
!        !Present(exampleNumber3) setExampleNumber3 pointer exampleNumber3
        
!        !Return pointer
!        RETURN pointer;
!    ENDFUNC

    !NEW constructor to allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer\dataPointer self)
            pointer:=bool_(FALSE);
    ERROR
        !RAISE ;
    ENDPROC

    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer,VAR rmqmessage message)
        VAR bool data;
        RMQGetMsgData message,data;

        !Add custom behavior for "executing" this datatype here
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR bool data;
        RMQGetMsgData message,data;

        IF USE_DYNAMIC_DATA_ALLOCATION=TRUE THEN
            NEW pointer;
            bool_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=bool_(data);

    ERROR
        !RAISE ;
    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR bool data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=bool_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        RMQFindSlot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ERROR
        !RAISE ;
    ENDPROC

    !Cleans up any datapointer
    LOCAL PROC ERASE(INOUT dataPointer pointer)

        VAR dataPointer inheritanceParent;

        !Call ERASE on the object that this object inherits from
        IF pointer.inheritanceParent_name<>""
            OR pointer.inheritanceParent_id>0 THEN
            inheritanceParent.id:=pointer.inheritanceParent_id;
            inheritanceParent.name:=pointer.inheritanceParent_name;

            ERASE_ inheritanceParent;
        ENDIF

        !ERASE
!        IF dataPointer_isReference(pointer) bool_set pointer,bool_NULL;
!        IF dataPointer_isIndex(pointer) LIST_bool_del list\keepIndexes,pointer.id;
        pointer:=dataPointer_NULL;

    ERROR
        !RAISE ;
    ENDPROC


    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    
!    !¤¤¤ Get Self ¤¤¤
!    FUNC datapointer getSelf_(dataPointer pointer)
!        VAR dataPointer self;
!        try \obj:=pointer, "getSelf" \arg1_INOUT:=self;
!        RETURN self;
!    ENDFUNC
    
    !===========================================================================
    ! Public Data/Object Methods
    !===========================================================================

    !---------------------------------------------------------------------------
    ! Auxiliary Methods
    !---------------------------------------------------------------------------
    
    !///////////////////////////////////////////////////////////////////////////
    ! Privat Data/Object Methods
    !///////////////////////////////////////////////////////////////////////////

    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ! Event Responses
    !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ! States
    !$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

!    !&&& Get Self &&&
!    LOCAL PROC getSelf(dataPointer pointer,INOUT datapointer self)
!        VAR bool object;
!        object := bool_get(pointer);
!        self := object.self;
!    ENDPROC
    
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% Initialize the list %%%%

!    !Initialize the list
!    LOCAL PROC config()
!        LIST_bool_clear list;
!    ENDPROC

    !%%%% Direct Access to list %%%%

!    !Allow acces to list
!    FUNC bool bool_list(num i)
!        RETURN list{i};
!    ENDFUNC

!    !Allow access to list lenght
!    FUNC num bool_lenght()
!        !RETURN list_lenght;
!        RETURN LIST_bool_lenght(list);
!    ENDFUNC

    !%%%% Event Handler %%%%

    !event_handler is the default target for events subscribed to this object
    LOCAL PROC event_handler(dataPointer pointer,dataPointer eventNote)
        !Add default event handeling here
    ENDPROC

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC bool_set(INOUT dataPointer pointer,bool value)
        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN;
        !If the pointer is none of the above, create a new pointer with string val
        IF NOT USE_DYNAMIC_DATA_ALLOCATION pointer:=bool_(value);
        IF NOT USE_DYNAMIC_DATA_ALLOCATION RETURN;
        !ERROR
        !Data Pointer Not set up
        errno_bookAndRaise ERR_BAD_DATA_POINTER;
    ERROR
        !RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC bool bool_get(dataPointer pointer)
        VAR bool returnValue;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        !RAISE ;
    ENDFUNC

    !Method for to create a value-datapointer from a value, or that points to a value
    FUNC dataPointer bool_(bool value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        !RAISE ;
    ENDFUNC

    ! %%%% LIST methods %%%%

!    !Initialize new list
!    PROC LIST_bool_clear(
!        INOUT bool list{*}
!        \INOUT num lenght)

!        FOR i FROM 1 TO Dim(list,1) DO
!            list{i}:=bool_NULL;
!        ENDFOR

!        IF Present(lenght) lenght:=0;

!    ENDPROC

!    !Append a datapointer to the list
!    !The optional argument index will be set to the index that was used
!    PROC LIST_bool_append(
!        INOUT bool list{*}
!        \INOUT num lenght,
!        bool item
!        \INOUT num index)

!        !Reject null input
!        IF item=bool_NULL errno_bookAndRaise(ERR_UNEXPECTED_NULL);

!        IF NOT Present(lenght) THEN
!            FOR i FROM 1 TO Dim(list,1) DO
!                IF list{i}=bool_NULL THEN
!                    list{i}:=item;
!                    IF Present(index) index:=i;
!                    RETURN ;
!                ENDIF
!            ENDFOR
!            RETURN ;
!        ENDIF

!        lenght:=lenght+1;
!        list{lenght}:=item;
!        IF Present(index) index:=lenght;

!    ERROR
!        !RAISE ;
!    ENDPROC

!    !Pop the last data pointer in the list
!    !Or if index is specified, pops the index
!    FUNC bool LIST_bool_pop(
!        INOUT bool list{*}
!        \INOUT num lenght,
!        \num index)

!        VAR bool item;

!        !Reject indexes ouside of lenght
!        IF Present(lenght) AND Present(index) THEN
!            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
!        ENDIF

!        !Pop at spesific index
!        IF Present(index) THEN
!            item:=list{index};
!            list{index}:=bool_NULL;
!            LIST_bool_del list \lenght?lenght \keepIndexes,index;
!            RETURN item;
!        ENDIF

!        !Pop at last index, without lenght
!        IF NOT Present(lenght) THEN
!            FOR i FROM Dim(list,1) TO 1 DO
!                IF list{i}<>bool_NULL THEN
!                    item:=list{i};
!                    list{i}:=bool_NULL;
!                    RETURN item;
!                ENDIF
!            ENDFOR
!        ENDIF

!        !Pop at last index, with lenght
!        item:=list{lenght};
!        list{lenght}:=bool_NULL;
!        lenght:=lenght-1;
!        RETURN item;

!    ERROR
!        !RAISE ;
!    ENDFUNC

!    !Delete an item at a position of the list
!    PROC LIST_bool_del(
!        INOUT bool list{*}
!        \INOUT num lenght
!        \switch keepIndexes,
!        num index)

!        !Reject indexes ouside of lenght
!        IF Present(lenght) AND Present(index) THEN
!            IF index>lenght errno_bookAndRaise(ERR_LIST_OUT_OF_RANGE);
!        ENDIF

!        !Delet data
!        list{index}:=bool_NULL;

!        !If indexes should be keept, then don't shift any data around
!        IF Present(keepIndexes) RETURN ;

!        !Shift down the above items to close gap, without lenght
!        IF NOT Present(lenght) THEN
!            FOR i FROM index TO Dim(list,1)-1 DO
!                list{index}:=list{index+1};
!            ENDFOR
!            list{Dim(list,1)}:=bool_NULL;
!            RETURN ;
!        ENDIF

!        !Shift down the above items to close gap, with lenght
!        FOR i FROM index TO lenght-1 DO
!            list{index}:=list{index+1};
!        ENDFOR
!        list{lenght}:=bool_NULL;
!        lenght:=lenght-1;

!    ERROR
!        IF ERRNO=ERR_LIST_OUT_OF_RANGE RAISE ERR_LIST_OUT_OF_RANGE;
!        !RAISE ;
!    ENDPROC

!    !Returns the number of items actively used in the list (not null)
!    FUNC num LIST_bool_lenght(INOUT bool list{*})
!        VAR num lenght;
!        lenght:=0;

!        FOR i FROM 1 TO Dim(list,1) DO
!            IF list{i}<>bool_NULL THEN
!                lenght:=lenght+1;
!            ENDIF
!        ENDFOR

!        RETURN lenght;
!    ERROR
!        !RAISE ;
!    ENDFUNC

    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ! Examples
    !xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENDMODULE