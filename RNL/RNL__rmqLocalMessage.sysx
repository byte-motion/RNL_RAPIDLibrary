MODULE RNL__rmqLocalMessage(SYSMODULE)

    !Datatype: rmqLocalMessage
    !Module with standard methods for the datatype

    !***************************************************************************
    ! Data
    !***************************************************************************

    RECORD rmqLocalMessage
        rmqQueue queue;
        rmqCode_Instruction instruction;
        rmqCode_id id;
        rmqheader header;
        dataPointer data;
        unixTime timestamp;
    ENDRECORD


    !Per module setting for weather the list should be used
    !IF this bool is set to false (default) then the NEW keyword will
    !will create a stirng value datapointer for this datatype.
    !If it is set to true, then the NEW keyword will use the pre declared list.
    LOCAL CONST bool USE_LIST:=FALSE;


    !Null constants
    CONST rmqLocalMessage rmqLocalMessage_NULL:=["",9E9,9E9,["",9E9,9E9,9E9,9E9],["","",0,"","",0,""],9E9];
    LOCAL CONST rmqLocalMessage NULL:=["",9E9,9E9,["",9E9,9E9,9E9,9E9],["","",0,"","",0,""],9E9];

    !Pre delcared list to be dynamically allocated
    LOCAL VAR rmqLocalMessage list{1};
    LOCAL VAR num list_lenght:=0;

    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !Allocate a data and return pointer
    LOCAL PROC NEW(INOUT dataPointer pointer)
        VAR rmqLocalMessage data;

        IF USE_LIST THEN
            pointer.type:=Type(list);
            LIST_rmqLocalMessage_append list\lenght:=list_lenght,data\index:=pointer.id;
            RETURN ;
        ENDIF

        pointer:=rmqLocalMessage_(rmqLocalMessage_NULL);

    ERROR
        RAISE ;
    ENDPROC

    !Resolve an RMQ_execute command for this datatype. Return result
    LOCAL PROC RMQ_execute(INOUT dataPointer pointer,VAR rmqmessage message)
        VAR rmqLocalMessage data;
        RMQGetMsgData message,data;

        !Add custom behavior for this datatype here
        pointer:=dataPointer_NULL;

    ERROR
        RAISE ;
    ENDPROC

    !Allocate a data, set the data to recived RMQ message, and return pointer
    LOCAL PROC RMQ_NEW(INOUT dataPointer pointer,VAR rmqmessage message)

        VAR rmqLocalMessage data;
        RMQGetMsgData message,data;

        IF USE_LIST THEN
            NEW pointer;
            rmqLocalMessage_set pointer,data;
            RETURN ;
        ENDIF

        pointer:=rmqLocalMessage_(data);

    ERROR
        RAISE ;
    ENDPROC

    !Send RMQ message of this datatype
    LOCAL PROC RMQ_send(INOUT dataPointer data,dataPointer queue,dataPointer code)
        VAR rmqLocalMessage data_;
        VAR string queue_;
        VAR num code_;

        VAR rmqslot slot;

        data_:=rmqLocalMessage_get(data);
        queue_:=string_get(queue);
        code_:=num_get(code);

        rmqfindslot slot,queue_;
        RMQSendMessage slot,data_\UserDef:=code_;

    ERROR
        RAISE ;
    ENDPROC

    LOCAL PROC ERASE(INOUT dataPointer pointer)
        IF dataPointer_isReference(pointer) rmqLocalMessage_set pointer,NULL;
        IF dataPointer_isIndex(pointer) LIST_rmqLocalMessage_del list\lenght:=list_lenght,pointer.id;
        pointer:=dataPointer_NULL;
    ERROR
        RAISE ;
    ENDPROC

    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    !===========================================================================
    ! Public Data Methods
    !===========================================================================

    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    !%%%% DataPointer methods %%%%

    !Set a datapointers value
    PROC rmqLocalMessage_set(INOUT dataPointer pointer,rmqLocalMessage value)
        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
        IF dataPointer_isReference(pointer) RETURN;
        IF dataPointer_isValue(pointer) pointer.value:=ValToStr(value);
        IF dataPointer_isValue(pointer) RETURN;
        IF dataPointer_isIndex(pointer) list{pointer.id}:=value;
        IF dataPointer_isIndex(pointer) RETURN;
        !ERROR
        !Data Pointer Not set up
        errno_bookAndRaise ERR_BAD_DATA_POINTER;
    ERROR
        RAISE ;
    ENDPROC

    !Get a datapointers value
    FUNC rmqLocalMessage rmqLocalMessage_get(dataPointer pointer)
        VAR rmqLocalMessage returnValue;
        returnValue:=NULL;
        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
        IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
        IF dataPointer_isIndex(pointer) returnValue:=list{pointer.id};
        RETURN returnValue;
    ERROR
        RAISE ;
    ENDFUNC

    !Create a value-datapointer from a value, or that points to a value
    FUNC dataPointer rmqLocalMessage_(rmqLocalMessage value\switch asReference)
        VAR dataPointer pointer;
        pointer.type:=Type(value);
        IF Present(asReference) pointer.name:=ArgName(value);
        IF NOT Present(asReference) pointer.value:=ValToStr(value);
        RETURN pointer;
    ERROR
        RAISE ;
    ENDFUNC


    ! %%%% LIST methods %%%%

    !Initialize new list
    PROC LIST_rmqLocalMessage_NEW(
        INOUT rmqLocalMessage list{*}
        \INOUT num lenght)

        FOR i FROM 1 TO Dim(list,1) DO
            list{i}:=NULL;
        ENDFOR

        lenght:=0;

    ENDPROC

    !Append a datapointer to the list
    !The optional argument index will be set to the index that was used
    PROC LIST_rmqLocalMessage_append(
        INOUT rmqLocalMessage list{*}
        \INOUT num lenght,
        rmqLocalMessage item
        \INOUT num index)

        IF NOT Present(lenght) THEN
            FOR i FROM 1 TO Dim(list,1) DO
                IF list{i}=NULL THEN
                    list{i}:=item;
                    IF Present(index) index:=i;
                    RETURN ;
                ENDIF
            ENDFOR
            RETURN ;
        ENDIF

        lenght:=lenght+1;
        list{lenght}:=item;
        if present(index) index:=lenght;

    ERROR
        RAISE ;
    ENDPROC

    !Pop the last data pointer in the list
    !Or if index is specified, pops the index
    FUNC rmqLocalMessage LIST_rmqLocalMessage_pop(
        INOUT rmqLocalMessage list{*}
        \INOUT num lenght,
        \num index)

        VAR rmqLocalMessage item;

        !Pop at spesific index
        IF Present(index) THEN
            item:=list{index};
            list{index}:=NULL;
            LIST_rmqLocalMessage_del list\lenght?lenght,index;
            RETURN item;
        ENDIF

        !Pop at last index, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM Dim(list,1) TO 1 DO
                IF list{i}<>NULL THEN
                    item:=list{i};
                    list{i}:=NULL;
                    RETURN item;
                ENDIF
            ENDFOR
        ENDIF

        !Pop at last index, with lenght
        item:=list{lenght};
        list{lenght}:=NULL;
        lenght:=lenght-1;
        RETURN item;

    ERROR
        RAISE ;
    ENDFUNC

    !Delete an item at a position of the list
    PROC LIST_rmqLocalMessage_del(
        INOUT rmqLocalMessage list{*}
        \INOUT num lenght,
        num index)

        list{index}:=NULL;

        !Shift down the above items to close gap, without lenght
        IF NOT Present(lenght) THEN
            FOR i FROM index TO Dim(list,1)-1 DO
                list{index}:=list{index+1};
            ENDFOR
            list{Dim(list,1)}:=NULL;
            RETURN ;
        ENDIF

        !Shift down the above items to close gap, with lenght
        FOR i FROM index TO lenght-1 DO
            list{index}:=list{index+1};
        ENDFOR
        list{lenght}:=NULL;
        lenght := lenght-1;

    ERROR
        RAISE ;
    ENDPROC

    !Returns the number of items actively used in the list
    FUNC num LIST_rmqLocalMessage_lenght(INOUT rmqLocalMessage list{*})
        VAR num lenght;
        lenght:=0;

        FOR i FROM 1 TO Dim(list,1) DO
            IF list{i}<>NULL THEN
                lenght:=lenght+1;
            ENDIF
        ENDFOR

        RETURN lenght;
    ERROR
        RAISE ;
    ENDFUNC


ENDMODULE