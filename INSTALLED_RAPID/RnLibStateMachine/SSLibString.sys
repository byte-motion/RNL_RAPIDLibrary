MODULE SSLibString(SYSMODULE,NOSTEPIN)

    ! Rev 2018-11-16
    ! SS/RN

    FUNC num StrToNum(string stString)
        VAR num nVal;
        VAR bool bStatus;
        bStatus:=StrToVal(stString,nVal);
        IF bStatus RETURN nVal;
        RAISE 1;
    ERROR
        RETURN -1;
    ENDFUNC

    FUNC string BoolToStr(bool Val)
        IF Val RETURN "TRUE";
        RETURN "FALSE";
    ENDFUNC

    FUNC num StrSplit(string Text,string Delimiter,INOUT string Arr{*},\switch KeepDelimiter)
        VAR num Arr_i:=1;
        VAR string TextRemaining;
        VAR string stDummy;
        FOR i FROM 1 TO Dim(Arr,1) DO
            Arr{i}:="";
        ENDFOR
        TextRemaining:=Text;
        WHILE StrMatch(TextRemaining,1,Delimiter)<=StrLen(TextRemaining) AND Arr_i<=Dim(Arr,1) DO
            IF StrSplit2(TextRemaining,Delimiter,Arr{Arr_i},stDummy\KeepDelimiter?KeepDelimiter) THEN
                TextRemaining:=stDummy;
                Add Arr_i,1;
            ELSE
                RETURN Arr_i;
            ENDIF
        ENDWHILE
        IF Arr_i<=Dim(Arr,1) Arr{Arr_i}:=TextRemaining;
        RETURN Arr_i;
    ERROR
        RAISE ;
    ENDFUNC

    FUNC bool StrSplit2(string Text,string Delimiter,INOUT string Part1,INOUT string Part2,\switch KeepDelimiter)
        VAR num Del_i;
        VAR num nKeepDelimiter:=1;
        Part1:="";
        Part2:="";
        IF Present(KeepDelimiter) nKeepDelimiter:=0;
        Del_i:=StrMatch(Text,1,Delimiter);
        IF Del_i>StrLen(Text) THEN
            Part1:=Text;
            RETURN TRUE;
        ENDIF
        Part1:=StrPart(Text,1,(Del_i-nKeepDelimiter));
        IF (Del_i+1)<=StrLen(Text) THEN
            Part2:=StrPart(Text,(Del_i+1),(StrLen(Text)-Del_i));
        ENDIF
        RETURN TRUE;
    ERROR
        RETURN FALSE;
    ENDFUNC

    FUNC string StrReplace(string Text,string stFrom,string stTo,\switch All)
        ! Will replace the first or all instance(s) of the COMPLETE string <stFrom> from <Text>
        VAR num nFromPos;
        !Stop;
        ! Find startpos for string to replace
        nFromPos:=StrMatch(Text,1,stFrom);
        ! Check if it is valid
        IF nFromPos>StrLen(Text) RETURN Text;
        WHILE nFromPos<=StrLen(Text) DO
            IF nFromPos=1 THEN
                ! Position in start of string
                Text:=stTo+StrPart(Text,(StrLen(stFrom)+1),StrLen(Text)-StrLen(stFrom));
            ELSEIF nFromPos=StrLen(Text)-(StrLen(stFrom)-1) THEN
                ! Position in the end of string
                Text:=StrPart(Text,1,(StrLen(Text)-StrLen(stFrom)))+stTo;
            ELSE
                ! Somewhere in the middle
                Text:=StrPart(Text,1,(StrLen(Text)-(nFromPos-1)))+stTO+StrPart(Text,(StrLen(stFrom)+1),StrLen(Text)-StrLen(stFrom));
            ENDIF
            IF NOT Present(All) RETURN Text;
            nFromPos:=StrMatch(Text,1,stFrom);
        ENDWHILE
        RETURN Text;
    ERROR
        RAISE ;
    ENDFUNC

    FUNC string StrReplace2(string Text,string stFrom,string stTo,\switch All)
        ! Will replace the first or all instances(s) of any CHARACTER from <stFrom> from <Text>
        VAR num nFromPos;
        IF StrLen(stTo)>0 THEN
            IF StrFind(stTo,1,stFrom)<=StrLen(stTo) AND Present(All) RAISE 1;
        ENDIF
        IF stFrom="" RETURN Text;
        nFromPos:=StrFind(Text,1,stFrom);
        IF nFromPos>StrLen(Text) RETURN Text;
        WHILE nFromPos<=StrLen(Text) DO
            IF nFromPos=1 THEN
                ! Position in start of string
                Text:=stTo+StrPart(Text,2,StrLen(Text)-1);
            ELSEIF nFromPos=StrLen(Text) THEN
                ! Position in the end of string
                Text:=StrPart(Text,1,(StrLen(Text)-1))+stTo;
            ELSE
                ! Somewhere in the middle
                Text:=StrPart(Text,1,(nFromPos-1))+stTO+StrPart(Text,(nFromPos+1),StrLen(Text)-nFromPos);
            ENDIF
            IF NOT Present(All) RETURN Text;
            nFromPos:=StrFind(Text,1,stFrom);
        ENDWHILE
        RETURN Text;
    ERROR
        RAISE ;
    ENDFUNC

    FUNC string Pose2Str(pose poPose,\num DecT,\num DecQ)
        VAR num nDecT:=0;
        VAR num nDecQ:=6;
        IF Present(DecT) nDecT:=DecT;
        IF Present(DecQ) nDecQ:=DecQ;
        RETURN "[["+NumToStr(poPose.trans.x,nDecT)+","+NumToStr(poPose.trans.y,nDecT)+","+NumToStr(poPose.trans.z,nDecT)+"]["+NumToStr(poPose.rot.q1,nDecQ)+","+NumToStr(poPose.rot.q2,nDecQ)+","+NumToStr(poPose.rot.q3,nDecQ)+","+NumToStr(poPose.rot.q4,nDecQ)+"]]";
    ERROR
        RAISE ;
    ENDFUNC

ENDMODULE
